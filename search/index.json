[{"content":"嘿，大家好，今天复习了一下爬虫知识，自己想爬个网易云的歌单下来，备着以后禁网的时候听。但由于我懒癌晚期，懒得直接上浏览器上搜，搜着，发现没有一个合格的。 为什么？其实是因为那些爬虫是打开浏览器（即Selenium）、打开歌单的网址、把其中的歌曲名和链接拿下、依次用外链下载。 这个方法不好，原因是在网页版的网易云的无登陆状态是只能在歌单里看到十首歌，无法看全。就好比我歌单里有50首歌，而你的爬虫只能爬10首下来，没效果。\n没办法，只能自己写了。就是套了个api嘛。源码如下。\n{% codeblock lang:python %} import requests import json import jsonpath import os\nplaylist_id = input(\u0026lsquo;请输入歌单id: \u0026raquo;\u0026gt;') myjson = requests.get( \u0026lsquo;https://api.injahow.cn/meting/?type=playlist\u0026id={}'.format(playlist_id) ) data = json.loads(myjson.text)\nurls = [] names = [] for i in data: url = jsonpath.jsonpath(i, \u0026lsquo;$..url\u0026rsquo;) name = jsonpath.jsonpath(i, \u0026lsquo;$..name\u0026rsquo;)\nnames.append(name[0]) urls.append(url[0])  https://api.injahow.cn/meting/?server=netease\u0026type=url\u0026id=1344088470 print(\u0026lsquo;总共有{}个链接，开始下载……\\n\u0026rsquo;.format(len(urls)))\nif not os.path.exists(\u0026rsquo;.\\缓存糖果屋\\{}\\'.format(playlist_id)): os.mkdir(\u0026rsquo;.\\缓存糖果屋\\{}\\'.format(playlist_id))\nnum = 0 name_count = 0 for url in urls:\nid = url.split('\u0026amp;')[2].split('\u0026amp;')[0].split('=')[1] with requests.get(url) as resp: with open( '.\\\\缓存糖果屋\\\\{}\\\\'.format(playlist_id) + id + '.mp3', mode='wb', ) as f: f.write(resp.content) num += 1 print('完成{}个,即为'.format(num) + names[name_count]) name_count += 1  print('\\nALL DONE!')\n{% endcodeblock %}\n还有进度条版的: {% codeblock lang:python %} import requests import json import jsonpath import os from tqdm import tqdm\nplaylist_id = input(\u0026lsquo;请输入歌单id: \u0026raquo;\u0026gt;') myjson = requests.get( \u0026lsquo;https://api.injahow.cn/meting/?type=playlist\u0026id={}'.format(playlist_id) ) data = json.loads(myjson.text)\nurls = [] names = [] for i in data: url = jsonpath.jsonpath(i, \u0026lsquo;$..url\u0026rsquo;) name = jsonpath.jsonpath(i, \u0026lsquo;$..name\u0026rsquo;)\nnames.append(name[0]) urls.append(url[0])  https://api.injahow.cn/meting/?server=netease\u0026type=url\u0026id=1344088470 print(\u0026lsquo;总共有{}个链接，开始下载……\\n\u0026rsquo;.format(len(urls)))\nif not os.path.exists(\u0026rsquo;.\\缓存糖果屋\\{}\\'.format(playlist_id)): os.mkdir(\u0026rsquo;.\\缓存糖果屋\\{}\\'.format(playlist_id))\nfor url in tqdm(urls, desc=\u0026lsquo;下载中\u0026rsquo;):\nid = url.split('\u0026amp;')[2].split('\u0026amp;')[0].split('=')[1] with requests.get(url) as resp: with open( '.\\\\缓存糖果屋\\\\{}\\\\'.format(playlist_id) + id + '.mp3', mode='wb', ) as f: f.write(resp.content)  {% endcodeblock %}\n效果: 如果看到那些用ID命名的歌曲不惯呢，可以打开网易云音乐桌面版 \u0026ndash;\u0026gt; 打开本地音乐 \u0026ndash;\u0026gt; 选择目录 \u0026ndash;\u0026gt; 把缓存糖果屋添加进去 \u0026ndash;\u0026gt; 添加完后，点击匹配音乐 \u0026ndash;\u0026gt; ALL DONE!\nTO DO LIST:\n{% checkbox red,将文件命名为歌曲名 %} {% checkbox blue,加入歌曲下载 %} {% checkbox yellow, 实现GUI %}\n","date":"2022-01-29T09:29:42Z","permalink":"https://hugo.nikoblog.top/post/%E5%8D%87%E7%BA%A7-%E4%BC%98%E5%8C%96%E7%9A%84%E7%BD%91%E6%98%93%E4%BA%91%E6%AD%8C%E5%8D%95%E4%B8%8B%E8%BD%BD%E5%99%A8/","title":"升级+优化的网易云歌单下载器"},{"content":"前言 虽然我知道自己是小白，但我依旧想说说这一两年来Python的进步。\n一阵抒情 一年半前，我就一普通得不能再普通的小学生，可能在班级里成绩能排个前十，也就当个班长，但又有什么用呢？{% del 班长又不能当饭吃， %}与同学的关系也不是特别兄弟，也就是普通同学，最多也就是普通朋友。\n在那个暑假，我表哥过来我家暂住几周，说是要准备做手术。他每天都睡在我的房间，工作学习亦是如此，我每天闲来无事，就趴在他旁边，看他电脑上那些“好厉害啊”的代码，心中崇拜不已。我也就被吸引了过去，每天都这样看，慢慢也就了解了一些基础知识。{% del 虽说我表哥是学Java的 %}\n几周很快就过去了，表哥走了。{% del 不要乱想啊！ %}但我对计算机的热爱越来越多\n","date":"2022-01-24T15:02:44Z","permalink":"https://hugo.nikoblog.top/post/%E6%88%91%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/","title":"我的Python学习经历"},{"content":"{% folding 站长的碎碎念 %} 这就是默认的命令提示符，这还是我美化过的，cmd的潜质就只能被挖掘到这了。{% del 每天看这个我会吐的🤮 %} 我们不能就苟居于此。看到微软的Build 2019 大会的了吗，Windows Terminal，我一看，好东西，立马看文档配置，学成以后，便有此文。 {% endfolding %}\n安装 打开Microsoft Store，搜索Windows Terminal，直接安装即可。 还有个预览版，不知有什么差别，可以尝试。大概也差不了太多。 美化 基础 打开安装好的Windows Terminal，大概是这样: 很简单，我就只是加了个壁纸，调了一下不透明度，换了个字体，就完了。 你只需点那个向下的箭头，在下拉菜单里点击设置，在新建的窗口的下面点击你想设置的终端，如常用的Powershell和CMD，再找到外观,如下。\n","date":"2022-01-21T13:36:39Z","permalink":"https://hugo.nikoblog.top/post/%E8%AE%A9%E7%BB%88%E7%AB%AF%E6%9B%B4%E4%BC%98%E9%9B%85-windows-terminal%E7%BE%8E%E5%8C%96/","title":"让终端更优雅—— Windows Terminal美化"},{"content":"现在有不少人的博客网站都是白嫖 Github Pages等免费静态文件部署站的吧，我也不例外。但免费的东西总有不足之处，例如链接太长啦、加载太慢啦、CDN流量没啦等等。在以前配置Twikoo时就发现了一个还算良心的加速平台 —— Vercel\n登录/注册 大概是这样，选择自己的注册方式进去注册，但有个大坑等着你跳…… 我第一次注册的时候报了个错，就是下面这个。 Error:This user account is blocked. Contact support@vercel.com for more information.\n就是这个，整的我心态崩溃，其实解决很简单，你只需要按他要求发个邮件给他就行，就这么简单粗暴，我也是这么解决的，还多了一个外交机会，感兴趣的可以看我与可能跟我隔了大半个地球的人类对话\n创建仓库 登陆后，大概会自动进入Dashboard(即仪表板)，然后点击New Project,然后会看到这样： 我是登陆好的，一般应该是要先登录Github账号后同步才会这样。 到了这个界面后，点击进入下面的Import Third-Party Git Repository,输入自己博客静态文件的Github地址。\n如果还没部署到Github上，就先随便点个仓库，先创建了先。\n搞定这些后，会进入这样的页面： 注意，my-repository填的是将创建的仓库名，但这也是部署后的域名的一部分，能短就短，更何况填了就不能改了，慎填。\n整完这些后，Vercel会自动Clone源仓库的东东到你设的my-repository，可以在下面查看进度，等一小会……\nOver! 搞定后，Vercel会给你重定向，放烟花，可喜庆了。 点击中间的Domains下面的链接，那就是你的加速博客！\n补充 设定自定义域名 谁都不想用这不自由的又臭又长的地址，所以我命由我不由天。点击菜单栏的Settings，找到 Domains，点击默认域名右边的Edit按钮，自己改。\n更新网页 当你又对网页进行更改了咋办？No Problem。我们只需点到菜单栏的Deployments，点第一个列表Item右边的那三个点，像这样。 点击后出来一个框，点Promote to Production，弹出个确认框，确认完事。\n","date":"2022-01-19T19:55:32Z","permalink":"https://hugo.nikoblog.top/post/vercel-%E5%8A%A0%E9%80%9F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Vercel-加速个人博客"},{"content":"{% tip sync%} 这篇年度总结迟到了1月19天，也许有些目标已经忘记了，想起来就会持续更新。 {% endtip %}\n回顾 2021 🐂 2021这一年各个行业都不平凡，科技界有华为出鸿蒙2.0、OpenEuler系统，医学界有中国全面第二针甚至是第三针，而我在这一年也有许多改变和进步。\n一是我学习较以前更 {% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %} 刻苦了，{% psw 虽然说语文依旧很烂。 %}二是我的Code水平得到了有效提高，大部分原因还是我啃了好几本砖头书，如：《操作系统概念精要》、《编译原理》、《Tensorflow AI 》等 blabla的书📚\n最重要的是 (至少我是那么认为的)，本博客其实2021瘫了半年，记得是最后一次部署时Hexo报错：[No layout: index.html] 当时没看到，到学校上信息课时，一上博客，一片白，把我吓蒙了。然后没时间管，就渐渐忘了，很多博文没写。\n到了寒假，我就自由了，赶紧换个主题上线，就像现在这样，好看不？\n{%link 博客公告, /article/744616242/, /img/favicon.png%}\n最近疯狂刷博客，看看那Commits，2022才刚开始就三百多。 {% ghcard Niko-Karen, theme=algolia %}\n展望 2022 🐅 对于我这种小学生，最重要莫过于我人生中的第一场、也是一生一次的大考 —— 小升初。 也许我不能说那么哲学，但还是要说：{% span blue,小升初即是童年旅程的终点站。%}\n算了，不要那么抒情啦。进入正题。\n{% timeline 2022 将要发生的重大事迹, orange %}\n黄冈中学密考，好像是五月多。 目前已考上{% span cyan,广大附中%}……的分校，好像很……LAN\n{% emp 计算机二级%} Python 语言程序设计考试! 证明自己实力的时刻！ 加油！\n入初中，不知能进那所初中呢？\n嘿嘿，没想到吧，这天我生日。 我只要提早3天生出来就可以上初中了。可恶(〃＞目＜)。\n{% endtimeline %}\nTO DO LIST:\n{% checkbox red,成功考过计算机二级Python %} {% checkbox blue,进入黄冈中学 %} {% checkbox yellow, 必须出个Python开源项目 %} {% checkbox cyan checked, 多写博文 %}\n","date":"2022-01-19T11:11:48Z","permalink":"https://hugo.nikoblog.top/post/2021%E6%80%BB%E7%BB%93/","title":"2021·总结"},{"content":"{% note red \u0026lsquo;fas fa-exclamation-triangle\u0026rsquo; %} 本文会有很多主观意识的{% del 暴力语言 %}，如有不适，请吐槽，本人尽快更改。 {% endnote %}\n我用Linux也有很长时间了，有近三年了。在我9岁的时候，我第一次接触电脑就是用Ubuntu 18.04 LTS，当时图形界面已经很好看了，以至于现在我家的那台古董电脑还运行着Lubuntu 18.04 LTS (Ubuntu的分支版，LXDE桌面)。\n个人Linux使用史 { 主观 } 2018 那时我正在上网查资料，觉得Win7很丑、跟不上时代了，就想换个系统。当时在我们普通人眼中，只有一种系统:Windows，所以当时一搜 \u0026ldquo;重装系统\u0026rdquo; 就满屏是Windows的重装教程(我还不会自己重装)。\n我特无奈:\u0026ldquo;我的电脑装Win7已经有些撑不住了，还能来个Win8.1 ?Win10 ?\u0026ldquo;所以我再搜:\u0026ldquo;除Windows外的开源系统\u0026rdquo;，就出来个Linux,Unix。 \u0026ldquo;甚么是Linux? 甚么是Unix\u0026rdquo; 带着疑问，就尝试学习装了个最简单的Ubuntu。{% psw 差点就装上了Arch，装成了我估计要成仙。😅%}\n2019 自从我发现Linux这个大宝藏，就沉迷于此不可自拔，不停换系统:Ubuntu,Debian,Fedora,Centos\u0026hellip;\u0026hellip;甚至Arch都装上了。但有个大毛病，就是我装上后总嫌不好看，不停美化，把系统速度拉低又拉低，但好处既是我的命令行越来越熟，越来越快。\n2020 到了这个阶段，我可以自建Git服务器、博客服务器，运用git等工具\u0026hellip;\u0026hellip;巴拉巴拉很多技能都学习到了。其中激励我的大概都是我对计算机的热爱和痴迷，有了这些我才能步步高升，登上计算机的殿堂。\nLinux 发展史 { 客观 } 我对以前的Linux版本不熟，我主要了解的是内核版本4.5+至5.0+，平时使用的，也就这几个，曾经也自己编译内核自制小系统，叫{% label SimLinux orange %}，意思就是简单的Linux，功能也简单。就只有个Bash。\n{% note purple \u0026lsquo;fab fa-linux\u0026rsquo; simple %} 本人要不下次写个{%label 自己编译、制作Linux发行版教程 blue%}? 大家众议。 {% endnote %}\n跑题了，回到正题。\n2018 2018年的Linux已经非常不错了，当时的图形界面(除了图标)和现在竟没啥大变化。 {% psw 如果你美化了当我没说。 %}\n下面这玩意2G内存装Gnome挺神奇的，我也是2G内存，但装上Gnome就是PPT😑 2019 2019 图形界面较2018进步了点，尤其是图标进步很大，更有后起之秀Zorin OS，又漂亮又方便，制作者是两名爱尔兰的青少年。\n2020 2020的Linux没啥大变化，但美化下还是很不错的，我觉得吧，Linux用于服务器等商业方面就好，在个人发行版上还不够成熟，几乎每个人拿到Linux后都是直接美化，浪费时间，不太好的习惯，建议改正。\nBALABALA 我对Linux这个系统还是充满希望的，我也挺喜欢这个企鹅，和那个{% del 文明有礼 %}的Linus。最后，祝Linux越来越好！ ","date":"2022-01-18T11:17:51Z","permalink":"https://hugo.nikoblog.top/post/%E8%AF%B4%E8%AF%B4linux/","title":"说说Linux"},{"content":"{% note red \u0026ldquo;fas fa-language\u0026rdquo; %} 本教程使用Python语言，需提前安装Pip3 or Pip，例如Linux类的，请在命令行内输入: {% codeblock lang:shell %} sudo apt install python3-pip {% endcodeblock %} {% endnote %}\n安装 {% tabs 安装,-1 %}\n一条命令(临时换源): {% codeblock lang:shell %} sudo pip install requests -i https://mirrors.aliyun.com/pypi/simple/ {% endcodeblock %}\nPypi包源官网: Requests 在这可以看到有关这个第三方库的一切。\n另一个就是PIP命令行安装，很简单，一条命令。\n{% note purple \u0026ldquo;fas fa-info\u0026rdquo; %} 由于包源在国外，所以访问速度感人，可以先Pip换源，再试。(后面说) {% endnote %}\n{% codeblock lang:shell %} pip install requests {% endcodeblock %}\n加速(阿里云): {% codeblock lang:shell %}pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/{% endcodeblock %}\n本人无钱购买Mac，所以没有钞能力去完成这个教程，各位有钱人施舍施舍？\n{% endtabs %}\n使用 基础{Get请求} {% codeblock lang:python %} import requests data = { \u0026lsquo;User-Agent\u0026rsquo;: \u0026lsquo;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\u0026rsquo; } # 向服务器传递的数据 response = requests.get(\u0026lsquo;https://bing.com\u0026rsquo;,data=data).text # text函数:获取对应网址的源代码 print(response) {% endcodeblock %}\nUser-Agent就像是浏览器的身份证,如果是Requests默认的ua的话，对应服务器会拒绝你的爬虫请求，简而言之，拿不到数据。\n进阶 {Post请求}  带数据的 post  {% codeblock lang:python %}\n-- coding:utf-8 -- import requests import json\nhost = \u0026ldquo;http://httpbin.org/\" endpoint = \u0026ldquo;post\u0026rdquo; url = \u0026lsquo;'.join([host,endpoint]) data = {\u0026lsquo;key1\u0026rsquo;:\u0026lsquo;value1\u0026rsquo;,\u0026lsquo;key2\u0026rsquo;:\u0026lsquo;value2\u0026rsquo;}\nr = requests.post(url,data=data) #response = r.json() print (r.text) {% endcodeblock %}\n多文件上传  {% codeblock lang:python %}\n-- coding:utf-8 -- import requests import json\nhost = \u0026ldquo;http://httpbin.org/\" endpoint = \u0026ldquo;post\u0026rdquo;\nurl = \u0026lsquo;'.join([host,endpoint]) #多文件上传 files = [ (\u0026lsquo;file1\u0026rsquo;,(\u0026lsquo;test.txt\u0026rsquo;,open(\u0026lsquo;test.txt\u0026rsquo;, \u0026lsquo;rb\u0026rsquo;))), (\u0026lsquo;file2\u0026rsquo;, (\u0026lsquo;test.png\u0026rsquo;, open(\u0026lsquo;test.png\u0026rsquo;, \u0026lsquo;rb\u0026rsquo;))) ]\nr = requests.post(url,files=files) print (r.text) {% endcodeblock %}\n冷门 {Put 请求} {% codeblock lang:python %} import requests import json url_put = \u0026ldquo;http://127.0.0.1:8080/\u0026rdquo; headers_put = { \u0026lsquo;Content-Type\u0026rsquo;: \u0026ldquo;application/json\u0026rdquo; } param = { \u0026lsquo;myObjectField\u0026rsquo;: \u0026lsquo;hello\u0026rsquo; } payload = json.dumps(param) response_put = requests.put(url, data=payload, headers=headers_put) {% endcodeblock %}\n项目实战: 梨视频爬虫 {% codeblock lang:python %}\n!/usr/bin/python3 -- coding:utf-8 -- \u0026quot;\u0026rdquo;\u0026rdquo; @author: @file: 梨视频爬虫.py @time: 2021/7/11 21:48 @desc: \u0026quot;\u0026quot;\u0026quot; import requests\nurl = \u0026ldquo;https://www.pearvideo.com/video_1731260\" headers = { \u0026ldquo;user-agent\u0026rdquo;: \u0026ldquo;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36\u0026rdquo;, \u0026ldquo;referer\u0026rdquo;: url, } contId = url.split(\u0026quot;_\u0026quot;)[1] videoStatusUrl = f\u0026quot;https://video.pearvideo.com/mp4/third/20210603/cont-{contId}-15316010-202041-hd.mp4\u0026rdquo;\n\u0026lsquo;https://video.pearvideo.com/mp4/third/20210603/cont-1731260-15316010-202041-hd.mp4' resp = requests.get(videoStatusUrl, headers=headers).content with open(\u0026ldquo;video.mp4\u0026rdquo;, mode=\u0026ldquo;wb\u0026rdquo;) as file: file.write(resp)\n{% endcodeblock %}\n 第14行,referer的定义，因梨视频请求头中必须有防盗链，即字典中的referer，如果没有，则获取不到视频数据。 第16、17行，通过抓包得知，梨视频的视频直链即为一串固定地址加上视频ID号，只需进行字符串分割即可。 第20行，向服务器发起{% span purple, GET %}请求，注意,.content是获取网页的二进制数据。  总结 这库是真的好用，方便。比Python标准库urllib好N倍不止，平时爬虫爬个电影数据就好，不要太过分。\n","date":"2022-01-17T20:00:03Z","permalink":"https://hugo.nikoblog.top/post/python-requests/","title":"Python-Requests"},{"content":"跟微软的姻缘 事情回到两年前，那时我刚放暑假，如疯狗般把作业写完后，百无聊赖，就打开电脑玩。 上网看了看新闻后，感觉有点无趣: 上哪个网站都要登录，没账号、没邮箱寸步难行啊！\n就去注册个邮箱吧！心里想着。到处找地址，搜百度。但几乎没有哪个邮箱注册是不需要手机号的，而我就缺这玩意！ 咋办？接着找呗。最后，我找了Outlook，不用手机号！真香！\n就这样，跟微软扯上关系了呗(谁叫Gmail需要翻墙的\u0026hellip;\u0026hellip;那时我还不知道VPN是什么 😑)\n回到正题 不扯那么远。回到咱们主题: {% label Windows11美化+优化教程 purple%}\n注意，是Windows 11。禁止Windows 10仿Win11入内！\n 先给大家展示下我桌面哈 透明化任务栏 目前Windows虽然支持透明化，但还不够，还是太模糊了。我们要完美，完美！{来自处女座的咆哮}\n{% tabs 透明化方法,2 %}\n死磕在Windows设置里  打开设置 -\u0026gt; 辅助功能 -\u0026gt; 视觉效果 勾选透明效果，(好像装系统就自动勾了\u0026hellip;) Effect: 任务栏只有50%透明，不推荐  使用软件：TranslucentTB 优点：比另一个重点，但样式多。 缺点：好处说了，太重了。 {% tabs 使用方法 %}\n在应用商店里下载 打开应用商店，搜索TranslucentTB,安装、下载，免费送货上门 上官网下载 提供网址:\n Github网址 腾讯软件管家  {% endtabs %}\n使用软件：Startisback 官网：{%btn \u0026lsquo;https://startisback.com/',Startisback,outline%}\n 下载 Free Trial版，即免费版，足够了。 下载解压后，以管理员身份运行，安装。 打开控制面板 将右上角的【查看方式】修改为【大图标】，在下面点击【开始菜单】 点击左侧的【外观】，在右侧勾选【使用自定义任务栏颜色】，然后在右侧将颜色的滑动块移动到最左边，点击应用 — 确定 打开任务管理器 重启任务管理器  All Done!\n{% endtabs %}\nDism++优化 {% blockquote %} 美化易上头，一上头就把持不住。尽早跳出坑来，让其他人跳进去。嘻嘻~ {% endblockquote %} {% btn \u0026lsquo;https://dl.softmgr.qq.com/original/System/Dism10.1.1001.10.zip',下载,outline %}\n下载解压后，选择自己系统版本，打开对应的Dism++ EXE，尽自己所能优化，不会别动就行。\n不断探索 博主能力有限，也就一小学生，也就只能写这些了，有疑问或需求请在评论区提出，本人将加速更新。BiuBiu~\n","date":"2022-01-17T10:14:30Z","permalink":"https://hugo.nikoblog.top/post/windows11-%E7%BE%8E%E5%8C%96-%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B/","title":"Windows11 美化+优化教程"},{"content":"昨天翻了下写过的博文，其中有一篇是写网易云直链的，看着看着，一个邪恶的想法油然而生\u0026hellip;\u0026hellip;\n{% blockquote Niko,贱贱的语言 %} \u0026ldquo;为何不做一个集合音乐下载和播放的小程序呢？以我的能力完全可以的啊！搞他。\u0026rdquo; {% endblockquote %} 于是开始搞了。\n也没多久，一天一夜，搞定了。 下载的音乐会以歌曲id命名，放在文件目录，支持多文件下载（不是同时）。 看到没，下载完之后支持选择播放，但，凡事就怕但。 界面是在太 {丑} 好 {得} 看 {一} 了{批}！\n没办法啊！Python语言没一个好看的UI界面，也可能有，我不会用，比如Pyqt5。 害，不多说了，多说无益，放源代码！\nGithub文件地址\n{% codeblock lang:python %} from tkinter.constants import LEFT, RIGHT import requests import tkinter from tkinter import messagebox import sys\ndef music_play(): import pygame\npygame.mixer.init() pygame.mixer.music.load(str(id) + '.mp3') pygame.mixer.music.play()  def get_link(): try: text = entry.get() lst = text.split('?') str_lst = lst[1].split('=')[1]\n link = 'https://music.163.com/song/media/outer/url?id=' + str_lst global id id = str(str_lst) return link, id except Exception as error: error_s = 'ERROR:', str(error) entry.delete(0, tkinter.END) messagebox.showerror(error_s)  def get_song(link, id): data = { \u0026lsquo;user-agent\u0026rsquo;: \u0026lsquo;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\u0026rsquo; } resp = requests.get(link, data=data).content with open('.\\' + id + \u0026lsquo;.mp3\u0026rsquo;, \u0026lsquo;wb\u0026rsquo;) as s: s.write(resp)\nglobal result result = messagebox.askyesno(title='是否播放？', message='下载完成，是否播放？') if result: music_play() return True  def ex(): sys.exit(0)\ndef tkin_canvas(): global top top = tkinter.Tk() top.title(\u0026lsquo;网易云音乐下载\u0026rsquo;)\nL1 = tkinter.Label(top, text='请输入歌曲网址:') global entry entry = tkinter.Entry(top) button = tkinter.Button(top, text='下载', command=main) button_exit = tkinter.Button(top, text='退出', command=ex) L1.pack(side=LEFT) button_exit.pack(side=RIGHT) button.pack(side=RIGHT) entry.pack(side=RIGHT) top.mainloop()  def main(): print(\u0026lsquo;System Starting\u0026hellip;\u0026hellip;') all = get_link() link = all[0] id = all[1] chose = get_song(link, id) print(\u0026lsquo;All Done.')\nif name == \u0026lsquo;main': tkin_canvas()\n{% endcodeblock %}\n也没多少，80多行，轻轻松松。 搞完了这个，以后再来个进阶的，不断进步，积极进取！\n","date":"2022-01-10T14:54:31Z","permalink":"https://hugo.nikoblog.top/post/new-product-%E7%BD%91%E6%98%93%E4%BA%91%E4%B8%8B%E8%BD%BD%E6%92%AD%E6%94%BE%E5%99%A8/","title":"New Product -- 网易云下载播放器"},{"content":"网易云音乐有很多方法可以获取直链，但这些方法要么很快失效，要么有缓存时间。\n以下提供的方法简单、快捷并且直到现在依然可用。已经稳定几年了，网易云音乐外链用官方的就好。\n（凡是网易云音乐可以正常试听的均可以直链，因为版权原因或其他原因无法试听的也无法外链。）\n标题这里需要用到网易云音乐提供的直链 api： https://music.163.com/song/media/outer/url?id=xxx.mp3\n这里的 id=xxx.mp3 是根据你需要的歌曲的 ID 进行更改。\n标题例如：歌曲：纵容 / Capper https://music.163.com/#/song?id=1819970423\n标题修改为： https://music.163.com/song/media/outer/url?id=1819970423.mp3\n标题 DEMO 演示 \u0026lt;br\u0026gt; \u0026lt;audio controls=\u0026quot;controls\u0026quot;\u0026gt; \u0026lt;source src=\u0026quot;/i/song.ogg\u0026quot; type=\u0026quot;audio/ogg\u0026quot;\u0026gt; \u0026lt;source src=\u0026quot;https://music.163.com/song/media/outer/url?id=1816006982.mp3\u0026quot; type=\u0026quot;audio/mpeg\u0026quot;\u0026gt; Your browser does not support the audio element. \u0026lt;/audio\u0026gt; \u0026lt;br\u0026gt; ","date":"2022-01-06T19:05:06Z","permalink":"https://hugo.nikoblog.top/post/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E9%93%BE/","title":"网易云音乐直链"},{"content":"1. jieba 的江湖地位 NLP（自然语言）领域现在可谓是群雄纷争，各种开源组件层出不穷，其中一支不可忽视的力量便是 jieba 分词，号称要做最好的 Python 中文分词组件。\n“最好的” 这三个字可不是空穴来风，jieba 在开源社区的受欢迎程度非常之高。\njieba 项目目前的 github star 数已经达到 24k，其他热门分词组件像 HanLP star 数 20k、ansj_seg star 数 5.6k、pkuseg-python star 数 5k。可见 jieba 已经稳居中文分词领域 c 位。\njieba 的主要功能是做中文分词，可以进行简单分词、并行分词、命令行分词，当然它的功能不限于此，目前还支持关键词提取、词性标注、词位置查询等。\n更让人愉悦的是 jieba 虽然立足于 python，但同样支持其他语言和平台，诸如：C++、Go、R、Rust、Node.js、PHP、 iOS、Android 等。所以 jieba 能满足各类开发者的需求。\n2. 如何学 jieba 据我所知，jieba 最靠谱的文档是 github 项目的 readme，因为它似乎还没有独立的使用文档。但由于使用起来简单，看 readme 也能快速上手。\nJieba库的Github地址\n国内各大博客有关于 jieba 的使用教程，但需要甄别下准确度和时效性，因为 jieba 项目一直在更新。\n当然本文不是纯粹的种草文章，会简单介绍下 jieba 的使用方法。\n3. 安装 jieba jieba 支持pip或者conda安装，直接在命令行执行：\npip install jieba\r不出意外，应该能很快安装好。\n你也可以下载 jieba 安装包再安装，jieba 的 pypi 地址：\nPypi地址\n4. 分词初体验 分词是 NLP 处理的第一步，也是最基本的任务，分词的好坏直接决定了后面语义分析的精准度。\n所谓分词就是将一段表述里的词汇进行分解，比如 “我爱中国”，分解后有三个词：我、爱、中国，词性分别是名词、动词、名词。\njieba 库中用于分词的方法有三个：\njieba.cut 给定中文字符串，分解后返回一个迭代器，需要用 for 循环访问。\n参数解释：\n「strs」： 需要分词的字符串；\n「cut_all」：用来控制是否采用全模式；\n「HMM」：用来控制是否使用 HMM 模型；\n「use_paddle」：用来控制是否使用 paddle 模式下的分词模式，paddle 模式采用延迟加载方式，通过 enable_paddle 接口安装 paddlepaddle-tiny，并且 import 相关代码；\n这里区分全模式和精确模式，举个例子先看看区别：\n# 全模式\rseg_list = jieba.cut(\u0026quot;中国上海是一座美丽的国际性大都市\u0026quot;, cut_all=True)\rprint(\u0026quot;Full Mode: \u0026quot; + \u0026quot;/ \u0026quot;.join(seg_list)) # 返回结果\rFull Mode: 中国/ 上海/ 是/ 一座/ 美丽/ 的/ 国际/ 国际性/ 大都/ 大都市/ 都市\r# 精确模式\rseg_list = jieba.cut(\u0026quot;中国上海是一座美丽的国际性大都市\u0026quot;, cut_all=False)\rprint(\u0026quot;Full Mode: \u0026quot; + \u0026quot;/ \u0026quot;.join(seg_list)) # 返回结果\rDefault Mode: 中国/ 上海/ 是/ 一座/ 美丽/ 的/ 国际性/ 大都市\r可以看到，全模式把句子中所有的可以成词的词语都扫描出来, 会出现一词多用、一词多意。精确模式将句子最精确的切分开，每个词都只有一种含义。\njieba.cut方法默认是精确模式。\n还有一个参数控制 paddle 模式，会更加精确，使用这个的前提是你需要先安装 paddlepaddle-tiny。\n安装命令：\npip install paddlepaddle-tiny==1.6.1\n详情可以去官网看下，这里不举例。\njieba.cut_for_search 该方法和 cut 一样，分解后返回一个迭代器，需要用 for 循环访问。不过它是搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。\n参数解释：\n「strs」：需要分词的字符串；\n「HMM」：是否使用 HMM 模型，默认值为 True。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细。\n# 搜索引擎模式\rseg_list = jieba.cut_for_search(\u0026quot;中国上海是一座美丽的国际性大都市，拥有复旦大学、上海交通大学等知名高等学府\u0026quot;) print(\u0026quot;, \u0026quot;.join(seg_list))\r# 返回结果\rSearch Mode: 中国, 上海, 是, 一座, 美丽, 的, 国际, 国际性, 大都, 都市, 大都市, ，, 拥有, 复旦, 大学, 复旦大学, 、, 上海, 交通, 大学, 上海交通大学, 等, 知名, 高等, 学府, 高等学府\rjieba.lcut 和jieba.cut使用方法一样，不过返回的是列表。\ncut 和 cut_for_search 方法都是支持繁体字的。\n5. 添加自定义词典 如果是对专业新闻或者小说进行分词，会有很多的新词汇，jieba 库里没有就没办法识别，那么就需要添加自定义的词汇，比如：奥利给。\n添加自定义词汇的方法： jieba.load_userdict(file_name) 参数是文本文件，txt、csv 都可以。\n自定义词典文件的词汇格式是一个词占一行，每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。 比如：\n以 \u0026ldquo;奥利给，管虎执导的八佰是一部让人热血沸腾的好电影。\u0026rdquo; 这段话为例， 如果不添加自定义词典，很多词没办法识别出来。\n# 不添加自定义词典\rseg_list = jieba.cut(\u0026quot;奥利给，管虎执导的八佰是一部让人热血沸腾的好电影\u0026quot;)\rprint(\u0026quot;/ \u0026quot;.join(seg_list)) # 返回结果\r奥利/ 给/ ，/ 管虎/ 执导/ 的/ 八佰是/ 一部/ 让/ 人/ 热血沸腾/ 的/ 好/ 电影\r添加自定义词典后，新词、人名、电影名都可以识别出来\n# 载入词典\rjieba.load_userdict(\u0026quot;dict.txt\u0026quot;)\rseg_list = jieba.cut(\u0026quot;奥利给，管虎执导的八佰是一部让人热血沸腾的好电影\u0026quot;)\rprint(\u0026quot;/ \u0026quot;.join(seg_list)) # 返回结果\r奥利给/ ，/ 管虎/ 执导/ 的/ 八佰/ 是/ 一部/ 让/ 人/ 热血沸腾/ 的/ 好/ 电影\r6. 结论 jieba 无疑是一款优秀的分词工具，而且在不断地优化成长。前面讲了一些基本的使用，大家还可以尝试使用停用词、提取关键词、词性标注、词位置查询等功能，也是十分的便捷。\n","date":"2022-01-06T13:11:13Z","permalink":"https://hugo.nikoblog.top/post/python-jieba%E5%BA%93/","title":"Python Jieba库"},{"content":"花费一学期的时间，学习的知识，在两天内用尽心血在一张试卷上呈现，说起来有点夸张，但确是这样。\n在2022年1月6日，我们数学考试结束后，全班都仿佛一锅烧开的热水，沸腾了。\n听到那一声悦耳放学铃，我冲出教室，“畏罪潜逃”。冲进了学校附近的Mixue Ice Cream。\n喝着新鲜的柠檬水，看着书，好不痛快。 过了一会，几乎全班人都到了。 全是人。好挤。😑 有什么办法？忍吧。忍忍就过去了。\n","date":"2022-01-06T12:23:55Z","permalink":"https://hugo.nikoblog.top/post/%E6%95%A3%E5%AD%A6%E4%BB%A5%E5%90%8E/","title":"散学以后"},{"content":"Updated Blog at 2022/01/24 14:56 终于发现了以前博客为什么加载那么慢了，原来是圆角！ 文章的透明效果也是因为以前没认真看教程，以为会遮挡背景(本博客是根据Akilar的“每页都使用不同的自定义的背景”方案)。现在好了。\n本次更新主要优化了性能、美化了界面，也更新了我的大脑。“我以后再也不美化啦！” 图片？想多了。现在你们看到的不就是吗？反正我以后不会改了……\nUpdated Blog at 2022/1/14 21:41 本次更新更换了网站主题，由Next转为Butterfly {% btn \u0026lsquo;https://gitee.com/immyw/hexo-theme-butterfly',Butterfly主题Gitee地址,far fa-hand-point-right,blue larger,outline %}\n更新日志  优化博客访问速度，减少插件使用，尽量轻度搭建。 添加Live2d-Widget升级互动版看板娘(不是插件!)，美化一下嘛~  添加吸底Aplayer音乐播放器，歌单为网易云歌单 \u0026lsquo;清华自习室 / 学习处方\u0026rsquo; ，持续跟进。   添加双评论系统,Gitalk和Twikoo  添加在线聊天系统{%label TiDio blue%}，恶搞翻译。  各个页面展示 欢迎来到我的博客 {% btn \u0026lsquo;https://niko-karen.gtihub.io\u0026rsquo;,我的博客,far fa-hand-point-right,orange larger,outline %}\n","date":"2022-01-02T19:43:28Z","permalink":"https://hugo.nikoblog.top/post/%E5%8D%9A%E5%AE%A2%E5%85%AC%E5%91%8A/","title":"博客公告"},{"content":"{% note red \u0026lsquo;fas fa-exclamation-circle\u0026rsquo; %} 这篇文章是初建博客时写的，文笔稚嫩，还没写完，吾会尽力完成。 另外，文中的图书馆现在已经成为旧图书馆。 {% endnote %}\n前文P.S : 这篇文章巨多灾难，第一次被覆盖，第二次被删除。难受 :(\n在星期六的一个万里乌云、阳光明媚、晴空万里的日子里，本该安安稳稳地在家辛苦码字，但学习的欲望提醒了我。经过一番认真的整理后，我踏上了{%del 战场%}。\n到达图书馆，但又未完全到达。因为疫情还很严重，我还需经过层层关卡、过五关斩六将，才能真正{%del 救出公主%}进入内，更何况现在是假日，有很多人和我们一样，也在排队扫码。 十分钟后，我扫完码入内后，首先冲的是少儿馆，{% psw 其实我是去看成人馆， %}先进去还书。走进去之前，还要登记信息，那我就上吧…… \u0026ldquo;我要{% psw 强奸 %}你!\u0026ldquo;一个女声，对另一个女生说。这可把我吓得……咋俩女的还说这话，心脏病都要出来了。\n","date":"2021-11-14T16:20:22Z","permalink":"https://hugo.nikoblog.top/post/%E4%B8%80%E6%97%A5%E5%A5%87%E9%81%87/","title":"一日奇遇"},{"content":"1.前言 ​\t今天我放学回家时看到了许多令我个人感受良深的事物\n​\t可能因为我是个男生，许多人认为我不在意这些花花草草，实际上我表面上是这样，但\u0026hellip;\u0026hellip;\n​\t我很关心那些可怜的事物。\n 2.事例 ​\t(1) 每次家里来了爷爷奶奶养的鸡或鸭时，我都格外在意它们，甚至夜深人静时都去看它们，生怕它们哪天被**了。在这不久前，就来了一只鸡和鸭，它们都只存在了两天，在我去上课一段时间内，它们已成为了桌上菜。我心有余悸，在那次，我掩藏了十二年的心性被知道了，自那以后，我爸妈都知道了我不是冷血动物。\n​\t(2) 在某一年的暑假期间，我去了一趟北京，在逛街时，我看到了一位双腿截肢的老婆婆，她匍匐在推车上，用一块木板写上了向人乞讨的话语，但是没有一个人愿意施舍几枚硬币让她吃顿饱饭，仅仅只是将它看成了一位无用的过路人，冷眼旁观。只有我一个人一直看着她，看着她缓慢地，艰难地用手推着车走。我没有能力帮助她，我也没有胆量向其他人请求、向父母请求几元钱帮助她。我先天懦弱，很好强，无法在他人面前露出本性。\n​\t(3) 在今天，我看到了一只全身黑毛的流浪猫，我望着它，它也望着我，我俩对视了一分钟，后来，我实在忍受不了，疾步跑回了家，在我的密码日记本上，写上了一句话，并牢记在心，永远。\n 3.最后 ​\t最终到了六年级时，我才不那么懦弱、无能，也能释放心中的压力了。\n​\t这是我第一次将这些事公之于众，同时也释放了在心中压了十二年的大石，得以释然。\n","date":"2021-11-12T18:09:42Z","permalink":"https://hugo.nikoblog.top/post/%E6%80%9D/","title":"思"},{"content":"增城一行 就在昨天,我们到了我的外婆家\u0026mdash;\u0026ndash;增城.\n那是一个美丽的地方,但总有些美中不足.\nBad Side  到处乱装修.  为什么这样说? 主要还是因为附近总有新房子,别墅当初都是,导致房地产中介赚的盆满钵满。\n过于现代  嗯? 现代不好吗? 并不是这么说,而只是我不太喜欢过于喧闹的生活，我更喜欢诗歌中的那种隐居生活，这也像我的性格:不太爱说话。\nGood Side  足够方便,便利  嗯.这确实是增城的优点,也是增城的优势。 因为现代所以便利。因为便利所以繁荣。\n美丽  就像图片那样，我也见到了这花木繁茂、蓝天白云的增城，这是足以让人心神向往的，如果只是这张图片，还不足以表现增城的美。当然，以我那差得不得了的写作水平描写不出，大家可以自己去看看。\n","date":"2021-10-02T20:50:43Z","permalink":"https://hugo.nikoblog.top/post/%E6%88%91%E7%9A%84%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/","title":"我的旅行日记"},{"content":"Selenium，Python的浏览器自动化大佬库，称霸Python浏览器自动化领域。 作为萌新的我，当然要先学习这个既简单又困难的库。\n注意，阅读本文需要有亿点点前端知识才容易理解。要是大佬看到了不会冒犯到吧，不会吧……\n安装 Selenium 包 Pip 安装 sudo pip install selenium 源码包安装 sudo python setup.py install 安装 对应浏览器的 WebDriver Edge: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/\nChrome (淘宝源) : https://npm.taobao.org/mirrors/chromedriver/\nFirefox: https://github.com/mozilla/geckodriver/releases/\nIE: http://selenium-release.storage.googleapis.com/index.html?\nEdge：对应浏览器对应版本，对应下载。\nChrome: 注意，先在设置 \u0026ndash;\u0026gt; 关于Chrome 里查看Chrome版本号,再去我给的淘宝源里找。再注意，在淘宝源里找版本时，如果没有本浏览器的版本的话，就找自己版本号的上一个。\nFirefox: 选择自己系统版本下载对应的。{%del 我不用火狐，报错别怪我 (弱小.jpeg)\nIE: 这我没啥注释，但建议IE11用用2.5版本就好。(这年头还有人用IE?可怕可怕。)\n下载解压后把文件放在Python目录下的Scripts目录中，别问为啥，问就是懒得加环境变量。Linux的可以放在/usr/bin下。\n开始！ 废话忒多了，进入正题。\n基础 咱为啥要用Selenium，就是可以爬到普通爬虫爬不到的东东，用Selenium，更方便、更快捷、更显逼格！(打广告)\nfrom selenium import webdriver driver = webdriver.Chrome() #按照你的浏览器来，就上面那几种 driver.get(\u0026#34;https://bing.com\u0026#34;) #对应浏览器打开Bing标签页 大概会看到这样: ![](\u0026lsquo;Python Selenium自动化详解\\dri.webp\u0026rsquo;)\n如何往输入框内填入文字并点击搜索按钮进行搜索？ Very Easy.\n不要动你那个界面，打开DevTools，找到搜索框的元素，{% kbd 右键%} - {% kbd Copy %} - {% kbd CopyXpath %}，再回到代码这。\nfrom selenium import webdriver driver = webdriver.Chrome() #按照你的浏览器来，就上面那几种 driver.get(\u0026#34;https://bing.com\u0026#34;) #对应浏览器打开Bing标签页 input_table = driver.find_element_by_xpath(\u0026#39;你Copy的值\u0026#39;) #请原谅我那糟糕的命名。 input_table.send_keys(\u0026#39;梁非凡\u0026#39;) # 你想输入啥？ 注意，find_element_by_xpath这个函数很微妙，它的工作是在整个页面找一个元素，敲黑板，是一个。还有一个函数是find_elements_by_xpath，找的是一堆元素。很多手残的会多敲个s，找了半天的bug。\n运行。\n可以看到，输入框里输入了梁非凡，接着干。 按照上次那样，打开Devtools，找到搜索按钮的元素,接着Copy \u0026ndash;\u0026gt; Copy Xpath。\nfrom selenium import webdriver driver = webdriver.Chrome() #按照你的浏览器来，就上面那几种 driver.get(\u0026#34;https://bing.com\u0026#34;) #对应浏览器打开Bing标签页 input_table = driver.find_element_by_xpath(\u0026#39;你Copy的值\u0026#39;) #请原谅我那糟糕的命名。 input_table.send_keys(\u0026#39;梁非凡\u0026#39;) # 你想输入啥？ search_btn = driver.find_element_by_xpath(\u0026#39;Copy Value\u0026#39;) search_btn.click() 运行。 搞定！\n还有一种方法，将click()换成submit()，或是Webdriver模拟用户点击按键Enter进行搜索。进阶会讲。\n进阶 学了总要运用，搞个爬虫实例\n实战: ","date":"0001-01-01T00:00:00Z","permalink":"https://hugo.nikoblog.top/post/python-selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%A6%E8%A7%A3/","title":"Python Selenium自动化详解"}]